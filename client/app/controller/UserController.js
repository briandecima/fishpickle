/*
 * File: app/controller/UserController.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('fishpickle.controller.UserController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            registrationView: {
                selector: 'registrationview',
                xtype: 'registrationview'
            },
            settingsView: 'settingsview'
        },

        control: {
            "#RegistrationBackButton": {
                tap: 'onRegistrationBackButtonTap'
            },
            "#RegistrationSaveButton": {
                tap: 'onRegistrationSaveButtonTap'
            },
            "#registrationitem": {
                activate: 'onRegistrationViewActivate'
            },
            "#saveSettingsButton": {
                tap: 'onSaveSettingsButtonTap'
            }
        }
    },

    onRegistrationBackButtonTap: function(button, e, options) {
        this.getApplication().fireEvent('navigateToLoginView');
    },

    onRegistrationSaveButtonTap: function(button, e, options) {
        var app = this.getApplication();
        var callbackFn = function(){ app.fireEvent('navigateToLoginView');};
        this.saveUser(this.getRegistrationView(), callbackFn);
    },

    onRegistrationViewActivate: function(container, newActiveItem, oldActiveItem, options) {
        console.log('prepare user model');
        var user = Ext.create('fishpickle.model.User', {login:'', displayName:'', email:'', password:''});
        this.getRegistrationView().setRecord(user);
    },

    onSaveSettingsButtonTap: function(button, e, options) {
        var callbackFn = function(){  Ext.Msg.alert('Success', 'Settings successfully saved. ');};
        this.saveUser(this.getSettingsView(), callbackFn);
    },

    saveUser: function(view, callbackFn) {
        console.log('save user');
        var user = view.getRecord();
        user.set(view.getValues());
        user.getProxy().setUrl(fishpickle.baseURL + 'rest/user');
        //user.phantom = true;
        var errors = user.validate();
        if (errors.isValid()) {
            user.save({
                callback: function(records, operation, success) {
                    //success is not working
                    //   if (success) {
                    callbackFn();
                    //  } else {
                    //      Ext.Msg.alert('Error', 'An error occured while saving user. ');
                    //  }

                }
            },
            this);
        } else {
            var msg = '';
            for (i=0; i<errors.length; i++) {
                var e = errors.items[i];
                if ('name' == e.getField()) {
                    msg += 'Name ' + e.getMessage() + '\n';
                } else if ('email' == e.getField()) {
                    msg += 'Email ' + e.getMessage() + '\n';
                } else if ('login' == e.getField()) {
                    msg += 'Login Name ' + e.getMessage() + '\n';
                } else if ('password' == e.getField()) {
                    msg += 'Password ' + e.getMessage() + '\n';
                }
            }
        }
    }

});