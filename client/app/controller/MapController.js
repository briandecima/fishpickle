/*
 * File: app/controller/MapController.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('fishpickle.controller.MapController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            mapView: {
                selector: 'mapview',
                xtype: 'mapview'
            }
        },

        control: {
            "#getDirectionsButton": {
                tap: 'onGetDirectionsButtonTap'
            },
            "#removePinButton": {
                tap: 'onRemovePinButtonTap'
            },
            "map": {
                maprender: 'onMapRender'
            },
            "#mapOrigin": {
                change: 'onOriginChange'
            },
            "#mapDestination": {
                change: 'onDestinationChange'
            }
        }
    },

    onGetDirectionsButtonTap: function(button, e, options) {
        if (!fishpickle.mapOverlayResults) {
            fishpickle.mapOverlayResults = [];
        }
        var view = this.getMapView();
        var location = view.getValues();
        var gmap = view.child('map').getMap();

        var modeOfTravel = google.maps.TravelMode.WALKING;
        if (location.routeType == 'D') {
            modeOfTravel = google.maps.TravelMode.DRIVING;
        } else if (location.routeType == 'B') {
            modeOfTravel = google.maps.TravelMode.BICYCLING;
        }

        var directionService = new google.maps.DirectionsService();

        var request = {origin: fishpickle.mapOriginLatLng, destination: fishpickle.mapDestinationLatLng, travelMode:modeOfTravel};
        var scope = this;

        directionService.route(request, function (result, status) {
            if (status == 'OK' && result) {
                var renderer = new google.maps.DirectionsRenderer({
                    map: gmap,
                    directions: result
                });
                fishpickle.mapOverlayResults.push(renderer);
                scope.walkPath(result.routes[0].overview_path, gmap);
            }
        });

    },

    onRemovePinButtonTap: function(button, e, options) {
        if (fishpickle.mapOverlayMarkers) {
            var i;
            for(i in fishpickle.mapOverlayMarkers) {
                var marker = fishpickle.mapOverlayMarkers[i];
                if (marker) {
                    marker.setMap(null);
                    marker = null;
                }
            }
            fishpickle.mapOverlayMarkers = [];
        }

        if (fishpickle.mapOverlayResults) {
            for(var j=0; j<fishpickle.mapOverlayResults.length; j++) {
                var result = fishpickle.mapOverlayResults[j];
                result.setMap(null);
                result = null;
            }
            fishpickle.mapOverlayResults = [];
        }
    },

    onMapRender: function(map, gmap, options) {
        google.maps.event.addListener(gmap, 'click', this.onMapClick);

    },

    onOriginChange: function(textfield, newValue, oldValue, options) {
        this.updateLatLng(newValue, 'origin');

    },

    onDestinationChange: function(textfield, newValue, oldValue, options) {
        this.updateLatLng(newValue, 'destination');
    },

    onMapClick: function(event) {
        var location = event.latLng;
        var pos = new google.maps.LatLng(Number(location.lat()), Number(location.lng()) );

        var marker = new google.maps.Marker({
            position: pos,
            title: (location.lat() + ', ' + location.lng()),
            map: this,
            animation: google.maps.Animation.DROP
        });

        google.maps.event.addListener(marker, 'click', function () {
            Ext.Msg.show({
                title: 'Set as...',
                buttons: [{text:'Origin', itemId:'orig'},{text:'Destination', itemId:'dest'}],
                fn: function (event) {
                    var markerPos = this.getPosition();
                    if (event == 'orig') {
                        fishpickle.mapOriginLatLng = markerPos;
                    } else {
                        fishpickle.mapDestinationLatLng = markerPos;
                    }
                }, 
                scope: marker
            });
        });



        if (!fishpickle.mapOverlayMarkers) {
            fishpickle.mapOverlayMarkers = [];
        }
        fishpickle.mapOverlayMarkers.push(marker);


    },

    updateLatLng: function(addressValue, fieldType) {
        var geoService = new google.maps.Geocoder();
        var request = {address: addressValue};

        geoService.geocode(request, function (result, status) {
            if (status == 'OK' && result && result[0]) {
                if (fieldType == 'origin') {
                    fishpickle.mapOriginLatLng = result[0].geometry.location;     
                } else {
                    fishpickle.mapDestinationLatLng = result[0].geometry.location;
                }
            } else {
                if (fieldType == 'origin') {
                    fishpickle.mapOriginLatLng = undefined;     
                } else {
                    fishpickle.mapDestinationLatLng = undefined;
                }
            }
        });
    },

    walkPath: function(path, gmap) {
        if (path.length > 0) {
            var img = new google.maps.MarkerImage('touch/resources/images/stickfig.gif');
            Ext.defer(this.walkNextStep, 1000, this, [path, gmap, null, img, 0]);
        }
    },

    walkNextStep: function(path, gmap, lastMarker, img, index) {
        if (path.length > 0) {
            var animationType = google.maps.Animation.DROP;
            if (lastMarker) {
                lastMarker.setMap(null);
                lastMarker = null;
                animationType = null;
            }
            lastMarker = new google.maps.Marker({
                position: path[index],
                map: gmap,
                icon: img,
                animation: animationType
            });
            if (index+1 <= path.length) {
                Ext.defer(this.walkNextStep, 1000, this, [path, gmap, lastMarker, img, index+1]);
            }
        }

    }

});